package category

import (
	"github.com/jmoiron/sqlx"
	_ "github.com/lib/pq"
)

var (
	queryCreateTable = `CREATE TABLE IF NOT EXISTS public.categories
	(
		id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
		category_name character varying COLLATE pg_catalog."default" NOT NULL,
		unit character varying COLLATE pg_catalog."default" NOT NULL,
		CONSTRAINT categories_pkey PRIMARY KEY (id)
	)
	
	TABLESPACE pg_default;
	
	ALTER TABLE IF EXISTS public.categories
    OWNER to postgres;`

	queryDeleteTable = `DROP TABLE public.categories`

	queryInsert = `INSERT INTO public.categories(category_name, unit)
	VALUES ($1, $2) RETURNING id;`

	querySelect = `SELECT * FROM public.categories;`

	queryUpdate = `UPDATE public.categories
	SET category_name=$2, unit=$3
	WHERE id=$1;`

	queryDelete = `DELETE FROM public.categories
	WHERE id=$1;`

	queryCleanDb = `DELETE FROM public.categories;`
)

type Repository struct {
	db *sqlx.DB
}

func NewRepository(db *sqlx.DB) *Repository {
	return &Repository{db: db}
}

func (repo *Repository) Insert(category *Category) (int, error) {
	rows, err := repo.db.Queryx(queryInsert, category.CategoryName, category.Unit)
	defer rows.Close()
	id := -1
	if err != nil {
		return id, err
	}

	rows.Next()
	err = rows.Scan(&id)
	return id, nil
}

func (repo *Repository) CreateTable() error {
	_, err := repo.db.Exec(queryCreateTable)
	return err
}

func (repo *Repository) DeleteTable() error {
	_, err := repo.db.Exec(queryDeleteTable)
	return err
}

func (repo *Repository) Select() ([]Category, error) {
	rows, err := repo.db.Queryx(querySelect)
	defer rows.Close()
	if err != nil {
		return nil, err
	}

	category := Category{}
	categoryArray := []Category{}
	for rows.Next() {
		err = rows.StructScan(&category)
		if err != nil {
			return nil, err
		}
		categoryArray = append(categoryArray, category)
	}
	return categoryArray, err
}

func (repo *Repository) Delete(id int) error {
	_, err := repo.db.Exec(queryDelete, id)
	return err
}

func (repo *Repository) Update(id int, category *Category) error {
	_, err := repo.db.Queryx(queryUpdate, id, category.CategoryName, category.Unit)
	return err
}

func (repo *Repository) Clean() error {
	_, err := repo.db.Exec(queryCleanDb)
	return err
}
