package meal

import (
	"github.com/jmoiron/sqlx"
	_ "github.com/lib/pq"
)

var (
	queryCreateTable = `CREATE TABLE IF NOT EXISTS public.meals
	(
		id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
		position_name character varying COLLATE pg_catalog."default" NOT NULL,
		category_id integer NOT NULL,
		price double precision NOT NULL,
		amount double precision NOT NULL,
		menu_id integer NOT NULL,
		CONSTRAINT meal_pkey PRIMARY KEY (id),
		CONSTRAINT categories FOREIGN KEY (category_id)
			REFERENCES public.categories (id) MATCH SIMPLE
			ON UPDATE NO ACTION
			ON DELETE NO ACTION
	)
	
	TABLESPACE pg_default;
	
	ALTER TABLE IF EXISTS public.meals
    OWNER to postgres;`

	queryDeleteTable = `DROP TABLE public.meals`

	queryInsert = `INSERT INTO public.meals(
	position_name, category, price, amount)
	VALUES ($1, $2, $3, $4) RETURNING id;`

	querySelect = `SELECT * FROM public.meals;`

	queryUpdate = `UPDATE public.meals
	SET position_name=$2, category=$3, price=$4, amount=$5
	WHERE id=$1;`

	queryDelete = `DELETE FROM public.meals
	WHERE id=$1;`

	queryCleanDb = `DELETE FROM public.meals;`

	queryResetCounter = `alter sequence meals_id_seq restart with 1`
)

type Repository struct {
	db *sqlx.DB
}

func NewRepository(db *sqlx.DB) *Repository {
	return &Repository{db: db}
}

func (repo *Repository) Insert(meal *Meal) (int, error) {
	rows, err := repo.db.Queryx(queryInsert, meal.MealName, meal.CategoryId, meal.Price, meal.Amount)
	defer rows.Close()
	id := -1
	if err != nil {
		return id, err
	}

	rows.Next()
	err = rows.Scan(&id)
	return id, nil
}

func (repo *Repository) CreateTable() error {
	_, err := repo.db.Exec(queryCreateTable)
	return err
}

func (repo *Repository) DeleteTable() error {
	_, err := repo.db.Exec(queryDeleteTable)
	return err
}

func (repo *Repository) Select() ([]Meal, error) {
	rows, err := repo.db.Queryx(querySelect)
	defer rows.Close()
	if err != nil {
		return nil, err
	}

	meal := Meal{}
	var mealArray []Meal
	for rows.Next() {
		err = rows.StructScan(&meal)
		if err != nil {
			return nil, err
		}
		mealArray = append(mealArray, meal)
	}
	return mealArray, err
}

func (repo *Repository) Delete(id int) error {
	_, err := repo.db.Exec(queryDelete, id)
	return err
}

func (repo *Repository) Update(id int, meal *Meal) error {
	_, err := repo.db.Queryx(queryUpdate, id, meal.MealName, meal.CategoryId, meal.Price, meal.Amount)
	return err
}

func (repo *Repository) Clean() error {
	_, err := repo.db.Exec(queryCleanDb)
	return err
}

func (repo *Repository) ResetCounter() error {
	_, err := repo.db.Exec(queryResetCounter)
	return err
}
